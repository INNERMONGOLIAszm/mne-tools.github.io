

.. _sphx_glr_auto_examples_time_frequency_plot_compute_source_psd_epochs.py:


=====================================================================
Compute Power Spectral Density of inverse solution from single epochs
=====================================================================

Compute PSD of dSPM inverse solution on single trial epochs restricted
to a brain label. The PSD is computed using a multi-taper method with
Discrete Prolate Spheroidal Sequence (DPSS) windows.





.. image:: /auto_examples/time_frequency/images/sphx_glr_plot_compute_source_psd_epochs_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Reading inverse operator decomposition from /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis-meg-oct-6-meg-inv.fif...
        Reading inverse operator info...
        [done]
        Reading inverse operator decomposition...
        [done]
        305 x 305 full covariance (kind = 1) found.
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Noise covariance matrix read.
        22494 x 22494 diagonal covariance (kind = 2) found.
        Source covariance matrix read.
        22494 x 22494 diagonal covariance (kind = 6) found.
        Orientation priors read.
        22494 x 22494 diagonal covariance (kind = 5) found.
        Depth priors read.
        Did not find the desired covariance matrix (kind = 3)
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        2 source spaces read
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Source spaces transformed to the inverse solution coordinate frame
    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_raw.fif...
        Read a total of 3 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
    Current compensation grade : 0
        Range : 25800 ... 192599 =     42.956 ...   320.670 secs
    Ready.
    Adding average EEG reference projection.
    1 projection items deactivated
    72 matching events found
    Applying baseline correction (mode: mean)
    Created an SSP operator (subspace dimension = 3)
    4 projection items activated
    Considering frequencies 0 ... 70 Hz
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 1
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a full noise covariance matrix (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Picked 305 channels from the data
    Computing inverse...
    (eigenleads need to be weighted)...
    Reducing data rank to 99
    Using 2 tapers with bandwidth 4.0Hz
    Processing epoch : 1
    Processing epoch : 2
    Processing epoch : 3
    Processing epoch : 4
    Processing epoch : 5
    Processing epoch : 6
    Processing epoch : 7
    Processing epoch : 8
    Processing epoch : 9
    Processing epoch : 10
        Rejecting  epoch based on EOG : [u'EOG 061']
    Processing epoch : 11




|


.. code-block:: python

    # Author: Martin Luessi <mluessi@nmr.mgh.harvard.edu>
    #
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt

    import mne
    from mne.datasets import sample
    from mne.minimum_norm import read_inverse_operator, compute_source_psd_epochs

    print(__doc__)

    data_path = sample.data_path()
    fname_inv = data_path + '/MEG/sample/sample_audvis-meg-oct-6-meg-inv.fif'
    fname_raw = data_path + '/MEG/sample/sample_audvis_raw.fif'
    fname_event = data_path + '/MEG/sample/sample_audvis_raw-eve.fif'
    label_name = 'Aud-lh'
    fname_label = data_path + '/MEG/sample/labels/%s.label' % label_name

    event_id, tmin, tmax = 1, -0.2, 0.5
    snr = 1.0  # use smaller SNR for raw data
    lambda2 = 1.0 / snr ** 2
    method = "dSPM"  # use dSPM method (could also be MNE or sLORETA)

    # Load data
    inverse_operator = read_inverse_operator(fname_inv)
    label = mne.read_label(fname_label)
    raw = mne.io.read_raw_fif(fname_raw)
    events = mne.read_events(fname_event)

    # Set up pick list
    include = []
    raw.info['bads'] += ['EEG 053']  # bads + 1 more

    # pick MEG channels
    picks = mne.pick_types(raw.info, meg=True, eeg=False, stim=False, eog=True,
                           include=include, exclude='bads')
    # Read epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                        baseline=(None, 0), reject=dict(mag=4e-12, grad=4000e-13,
                                                        eog=150e-6))

    # define frequencies of interest
    fmin, fmax = 0., 70.
    bandwidth = 4.  # bandwidth of the windows in Hz

    # compute source space psd in label

    # Note: By using "return_generator=True" stcs will be a generator object
    # instead of a list. This allows us so to iterate without having to
    # keep everything in memory.

    stcs = compute_source_psd_epochs(epochs, inverse_operator, lambda2=lambda2,
                                     method=method, fmin=fmin, fmax=fmax,
                                     bandwidth=bandwidth, label=label,
                                     return_generator=True)

    # compute average PSD over the first 10 epochs
    n_epochs = 10
    for i, stc in enumerate(stcs):
        if i >= n_epochs:
            break

        if i == 0:
            psd_avg = np.mean(stc.data, axis=0)
        else:
            psd_avg += np.mean(stc.data, axis=0)

    psd_avg /= n_epochs
    freqs = stc.times  # the frequencies are stored here

    plt.figure()
    plt.plot(freqs, psd_avg)
    plt.xlabel('Freq (Hz)')
    plt.ylabel('Power Spectral Density')
    plt.show()

**Total running time of the script:**
(0 minutes 2.145 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_compute_source_psd_epochs.py <plot_compute_source_psd_epochs.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_compute_source_psd_epochs.ipynb <plot_compute_source_psd_epochs.ipynb>`
