.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_inverse_plot_mixed_norm_inverse.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_inverse_plot_mixed_norm_inverse.py:


================================================================
Compute sparse inverse solution with mixed norm: MxNE and irMxNE
================================================================

Runs an (ir)MxNE (L1/L2 [1]_ or L0.5/L2 [2]_ mixed norm) inverse solver.
L0.5/L2 is done with irMxNE which allows for sparser
source estimates with less amplitude bias due to the non-convexity
of the L0.5/L2 mixed norm penalty.

References
----------
.. [1] Gramfort A., Kowalski M. and Hamalainen, M.
   "Mixed-norm estimates for the M/EEG inverse problem using accelerated
   gradient methods", Physics in Medicine and Biology, 2012.
   https://doi.org/10.1088/0031-9155/57/7/1937.

.. [2] Strohmeier D., Haueisen J., and Gramfort A.
   "Improved MEG/EEG source localization with reweighted mixed-norms",
   4th International Workshop on Pattern Recognition in Neuroimaging,
   Tuebingen, 2014. 10.1109/PRNI.2014.6858545


.. code-block:: python

    # Author: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #         Daniel Strohmeier <daniel.strohmeier@tu-ilmenau.de>
    #
    # License: BSD (3-clause)

    import numpy as np

    import mne
    from mne.datasets import sample
    from mne.inverse_sparse import mixed_norm, make_stc_from_dipoles
    from mne.minimum_norm import make_inverse_operator, apply_inverse
    from mne.viz import (plot_sparse_source_estimates,
                         plot_dipole_locations, plot_dipole_amplitudes)

    print(__doc__)

    data_path = sample.data_path()
    fwd_fname = data_path + '/MEG/sample/sample_audvis-meg-eeg-oct-6-fwd.fif'
    ave_fname = data_path + '/MEG/sample/sample_audvis-ave.fif'
    cov_fname = data_path + '/MEG/sample/sample_audvis-shrunk-cov.fif'
    subjects_dir = data_path + '/subjects'

    # Read noise covariance matrix
    cov = mne.read_cov(cov_fname)
    # Handling average file
    condition = 'Left Auditory'
    evoked = mne.read_evokeds(ave_fname, condition=condition, baseline=(None, 0))
    evoked.crop(tmin=0, tmax=0.3)
    # Handling forward solution
    forward = mne.read_forward_solution(fwd_fname)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    365 x 365 full covariance (kind = 1) found.
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 59) active
    Reading /home/circleci/mne_data/MNE-sample-data/MEG/sample/sample_audvis-ave.fif ...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Found the data of interest:
            t =    -199.80 ...     499.49 ms (Left Auditory)
            0 CTF compensation matrices available
            nave = 55 - aspect type = 100
    Projections have already been applied. Setting proj attribute to True.
    Applying baseline correction (mode: mean)
    Reading forward solution from /home/circleci/mne_data/MNE-sample-data/MEG/sample/sample_audvis-meg-eeg-oct-6-fwd.fif...
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        2 source spaces read
        Desired named matrix (kind = 3523) not available
        Read MEG forward solution (7498 sources, 306 channels, free orientations)
        Desired named matrix (kind = 3523) not available
        Read EEG forward solution (7498 sources, 60 channels, free orientations)
        MEG and EEG forward solutions combined
        Source spaces transformed to the forward solution coordinate frame


Run solver


.. code-block:: python

    alpha = 55  # regularization parameter between 0 and 100 (100 is high)
    loose, depth = 0.2, 0.9  # loose orientation & depth weighting
    n_mxne_iter = 10  # if > 1 use L0.5/L2 reweighted mixed norm solver
    # if n_mxne_iter > 1 dSPM weighting can be avoided.

    # Compute dSPM solution to be used as weights in MxNE
    inverse_operator = make_inverse_operator(evoked.info, forward, cov,
                                             depth=depth, fixed=True,
                                             use_cps=True)
    stc_dspm = apply_inverse(evoked, inverse_operator, lambda2=1. / 9.,
                             method='dSPM')

    # Compute (ir)MxNE inverse solution with dipole output
    dipoles, residual = mixed_norm(
        evoked, forward, cov, alpha, loose=loose, depth=depth, maxit=3000,
        tol=1e-4, active_set_size=10, debias=True, weights=stc_dspm,
        weights_min=8., n_mxne_iter=n_mxne_iter, return_residual=True,
        return_as_dipoles=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Forward is not surface oriented, converting.
        Average patch normals will be employed in the rotation to the local surface coordinates....
        Converting to surface-based source orientations...
        [done]
    info["bads"] and noise_cov["bads"] do not match, excluding bad channels from both
    Computing inverse operator with 364 channels.
        Created an SSP operator (subspace dimension = 4)
    estimated rank (mag + grad): 302
    Setting small MEG eigenvalues to zero.
    Not doing PCA for MEG.
    estimated rank (eeg): 58
    Setting small EEG eigenvalues to zero.
    Not doing PCA for EEG.
        Created the whitener using a noise covariance matrix with rank 360 (4 small eigenvalues omitted)
    Creating the depth weighting matrix...
        203 planar channels
        limit = 7262/7498 = 10.020865
        scale = 2.58122e-08 exp = 0.9
        Picked elements from a free-orientation depth-weighting prior into the fixed-orientation one
        Average patch normals will be employed in the rotation to the local surface coordinates....
        Converting to surface-based source orientations...
        [done]
    Computing inverse operator with 364 channels.
    Creating the source covariance matrix
    Whitening the forward solution.
    Adjusting source covariance matrix.
    Computing SVD of whitened and weighted lead field matrix.
        largest singular value = 6.21995
        scaling factor to adjust the trace = 6.82623e+18
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 4)
        Created the whitener using a noise covariance matrix with rank 360 (4 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Applying inverse operator to "Left Auditory"...
        Picked 364 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained  69.4% variance
        dSPM...
    [done]
    Converting forward solution to surface orientation
        Average patch normals will be employed in the rotation to the local surface coordinates....
        Converting to surface-based source orientations...
        [done]
    info["bads"] and noise_cov["bads"] do not match, excluding bad channels from both
    Computing inverse operator with 364 channels.
        Created an SSP operator (subspace dimension = 4)
    estimated rank (mag + grad): 302
    Setting small MEG eigenvalues to zero.
    Not doing PCA for MEG.
    estimated rank (eeg): 58
    Setting small EEG eigenvalues to zero.
    Not doing PCA for EEG.
        Created the whitener using a noise covariance matrix with rank 360 (4 small eigenvalues omitted)
    Whitening lead field matrix.
    Applying loose dipole orientations. Loose value of 0.2.
    Reducing source space to 543 sources
    Whitening data matrix.
    -- ALPHA MAX : 100.00000000000006
    Using block coordinate descent
    Iteration 1 :: p_obj 1930.706212 :: dgap 0.000075 ::n_active_start 10 :: n_active_end 6
    Convergence reached ! (gap: 7.535317445217515e-05 < 0.0001)
    Final active set size: 6
    active set size 6
    -- ALPHA MAX : 220.60549690753845
    Using block coordinate descent
    Final active set size: 3
    active set size 3
    -- ALPHA MAX : 355.4165885702059
    Using block coordinate descent
    Final active set size: 3
    active set size 3
    -- ALPHA MAX : 410.9022658162008
    Using block coordinate descent
    Final active set size: 2
    active set size 2
    -- ALPHA MAX : 433.2449094305708
    Using block coordinate descent
    Final active set size: 2
    active set size 2
    -- ALPHA MAX : 435.72273606499937
    Using block coordinate descent
    Final active set size: 2
    active set size 2
    -- ALPHA MAX : 435.985670905447
    Using block coordinate descent
    Final active set size: 2
    active set size 2
    -- ALPHA MAX : 436.01365027507336
    Using block coordinate descent
    Final active set size: 2
    active set size 2
    Convergence reached after 7 reweightings!
    Debiasing converged after 67 iterations max(|D - D0| = 6.079406e-07 < 1.000000e-06)
    4 projection items deactivated
    Created an SSP operator (subspace dimension = 4)
    4 projection items activated
    SSP projectors applied...
    0 projection items deactivated
    [done]


Plot dipole activations


.. code-block:: python

    plot_dipole_amplitudes(dipoles)

    # Plot dipole location of the strongest dipole with MRI slices
    idx = np.argmax([np.max(np.abs(dip.amplitude)) for dip in dipoles])
    plot_dipole_locations(dipoles[idx], forward['mri_head_t'], 'sample',
                          subjects_dir=subjects_dir, mode='orthoview',
                          idx='amplitude')

    # Plot dipole locations of all dipoles with MRI slices
    for dip in dipoles:
        plot_dipole_locations(dip, forward['mri_head_t'], 'sample',
                              subjects_dir=subjects_dir, mode='orthoview',
                              idx='amplitude')




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_002.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_003.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_004.png
            :class: sphx-glr-multi-img




Plot residual


.. code-block:: python

    ylim = dict(eeg=[-10, 10], grad=[-400, 400], mag=[-600, 600])
    evoked.pick_types(meg=True, eeg=True, exclude='bads')
    evoked.plot(ylim=ylim, proj=True, time_unit='s')
    residual.pick_types(meg=True, eeg=True, exclude='bads')
    residual.plot(ylim=ylim, proj=True, time_unit='s')




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_005.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_006.png
            :class: sphx-glr-multi-img




Generate stc from dipoles


.. code-block:: python

    stc = make_stc_from_dipoles(dipoles, forward['src'])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Converting dipoles into a SourceEstimate.
    [done]


View in 2D and 3D ("glass" brain like 3D plot)


.. code-block:: python

    solver = "MxNE" if n_mxne_iter == 1 else "irMxNE"
    plot_sparse_source_estimates(forward['src'], stc, bgcolor=(1, 1, 1),
                                 fig_name="%s (cond %s)" % (solver, condition),
                                 opacity=0.1)




.. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_007.png
    :class: sphx-glr-single-img

.. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_008.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of active sources: 2


Morph onto fsaverage brain and view


.. code-block:: python

    morph = mne.compute_source_morph(stc, subject_from='sample',
                                     subject_to='fsaverage', spacing=None,
                                     sparse=True, subjects_dir=subjects_dir)
    stc_fsaverage = morph.apply(stc)
    src_fsaverage_fname = subjects_dir + '/fsaverage/bem/fsaverage-ico-5-src.fif'
    src_fsaverage = mne.read_source_spaces(src_fsaverage_fname)

    plot_sparse_source_estimates(src_fsaverage, stc_fsaverage, bgcolor=(1, 1, 1),
                                 fig_name="Morphed %s (cond %s)" % (solver,
                                 condition), opacity=0.1)



.. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_009.png
    :class: sphx-glr-single-img

.. image:: /auto_examples/inverse/images/sphx_glr_plot_mixed_norm_inverse_010.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    surface source space inferred...
        Left-hemisphere map read.
        Right-hemisphere map read.
    [done]
        Reading a source space...
        [done]
        Reading a source space...
        [done]
        2 source spaces read
    Total number of active sources: 2



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.369 seconds)

**Estimated memory usage:**  22 MB


.. _sphx_glr_download_auto_examples_inverse_plot_mixed_norm_inverse.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_mixed_norm_inverse.py <plot_mixed_norm_inverse.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_mixed_norm_inverse.ipynb <plot_mixed_norm_inverse.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
