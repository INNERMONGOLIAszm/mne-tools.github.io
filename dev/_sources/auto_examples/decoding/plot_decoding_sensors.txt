

.. _sphx_glr_auto_examples_decoding_plot_decoding_sensors.py:


==========================
Decoding sensor space data
==========================

Decoding, a.k.a MVPA or supervised machine learning applied to MEG
data in sensor space. Here the classifier is applied to every time
point.


.. code-block:: python

    # Authors: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #          Jean-Remi King <jeanremi.king@gmail.com>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt

    import mne
    from mne import io
    from mne.datasets import sample
    from mne.decoding import TimeDecoding

    print(__doc__)

    data_path = sample.data_path()

    plt.close('all')







Set parameters


.. code-block:: python

    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname, preload=True)
    raw.filter(2, None, method='iir')  # replace baselining with high-pass
    events = mne.read_events(event_fname)

    # Set up pick list: EEG + MEG - bad channels (modify to your needs)
    raw.info['bads'] += ['MEG 2443', 'EEG 053']  # bads + 2 more
    picks = mne.pick_types(raw.info, meg='grad', eeg=False, stim=True, eog=True,
                           exclude='bads')

    # Read epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, proj=True,
                        picks=picks, baseline=None, preload=True,
                        reject=dict(grad=4000e-13, eog=150e-6))

    epochs_list = [epochs[k] for k in event_id]
    mne.epochs.equalize_epoch_counts(epochs_list)
    data_picks = mne.pick_types(epochs.info, meg=True, exclude='bads')





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
    Current compensation grade : 0
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    High-pass filtering at 2 Hz
    145 matching events found
    No baseline correction applied
    4 projection items activated
    Loading data for 145 events and 106 original time points ...
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
    22 bad epochs dropped
    Dropped 11 epochs
    Dropped 0 epochs


Setup decoding: default is linear SVC


.. code-block:: python

    td = TimeDecoding(predict_mode='cross-validation', n_jobs=1)
    # Fit
    td.fit(epochs)
    # Compute accuracy
    td.score(epochs)
    # Plot scores across time
    td.plot(title='Sensor space decoding')



.. image:: /auto_examples/decoding/images/sphx_glr_plot_decoding_sensors_001.png
    :align: center




**Total running time of the script:**
(0 minutes 4.197 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_decoding_sensors.py <plot_decoding_sensors.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_decoding_sensors.ipynb <plot_decoding_sensors.ipynb>`
