

.. _sphx_glr_auto_examples_decoding_plot_decoding_xdawn_transformer.py:


====================================================================
Decoding in sensor space data using the Xdawn Transformer
====================================================================

Decoding applied to MEG data in sensor space decomposed using Xdawn.
Here the classifier is applied to features extracted on Xdawn filtered signals.




.. code-block:: python

    # Authors: Asish Panda <asishrocks95@gmail.com>
    #          Alexandre Barachant <alexandre.barachant@gmail.com>
    #
    # License: BSD (3-clause)
    import numpy as np
    import matplotlib.pyplot as plt

    from sklearn.cross_validation import cross_val_score, ShuffleSplit  # noqa
    from sklearn.pipeline import make_pipeline
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import label_binarize
    from sklearn.preprocessing import StandardScaler

    from mne import io, pick_types, read_events, Epochs
    from mne.viz import plot_topomap
    from mne.datasets import sample
    from mne.decoding import Vectorizer
    from mne.preprocessing import XdawnTransformer

    data_path = sample.data_path()

    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname, preload=True)
    raw.filter(2., None, method='iir')
    events = read_events(event_fname)

    picks = pick_types(raw.info, meg='mag', eeg=False, stim=False, eog=False,
                       exclude='bads')

    epochs = Epochs(raw, events, event_id, tmin, tmax, proj=False,
                    picks=picks, baseline=None, preload=True, verbose=False)

    X = epochs.get_data()
    y = label_binarize(epochs.events[:, 2], classes=[1, 3]).ravel()

    clf = make_pipeline(XdawnTransformer(n_components=2),
                        Vectorizer(),
                        StandardScaler(),
                        LogisticRegression())

    # Define a monte-carlo cross-validation generator (reduce variance):
    cv = ShuffleSplit(len(y), 10, test_size=0.2, random_state=42)

    scores = cross_val_score(clf, X, y, cv=cv)

    class_balance = np.mean(y == y[0])
    class_balance = max(class_balance, 1. - class_balance)
    print("Classification accuracy: %f / Chance level: %f" % (np.mean(scores),
                                                              class_balance))





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    add_eeg_ref defaults to True in 0.13, will default to False in 0.14, and will be removed in 0.15. We recommend to use add_eeg_ref=False and set_eeg_reference() instead.
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    High-pass filtering at 2 Hz
    Classification accuracy: 0.996552 / Chance level: 0.503448


plot Xdawn patterns estimated on full data for visualization



.. code-block:: python


    xdawn = XdawnTransformer(n_components=2)
    xdawn.fit(X, y)
    data = xdawn.patterns_
    fig, axes = plt.subplots(1, 4)
    for idx in range(4):
        plot_topomap(data[idx], epochs.info, axes=axes[idx], show=False)
    fig.suptitle('Xdawn patterns')
    fig.tight_layout()
    plt.show()



.. image:: /auto_examples/decoding/images/sphx_glr_plot_decoding_xdawn_transformer_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  4.713 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_decoding_xdawn_transformer.py <plot_decoding_xdawn_transformer.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_decoding_xdawn_transformer.ipynb <plot_decoding_xdawn_transformer.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
