

.. _example_decoding_plot_ems_filtering.py:


==============================================
Compute effect-matched-spatial filtering (EMS)
==============================================

This example computes the EMS to reconstruct the time course of
the experimental effect as described in:

Aaron Schurger, Sebastien Marti, and Stanislas Dehaene, "Reducing multi-sensor
data to a single time course that reveals experimental effects",
BMC Neuroscience 2013, 14:122


This technique is used to create spatial filters based on the
difference between two conditions. By projecting the trial onto the
corresponding spatial filters, surrogate single trials are created
in which multi-sensor activity is reduced to one time series which
exposes experimental effects, if present.

We will first plot a trials x times image of the single trials and order the
trials by condition. A second plot shows the average time series for each
condition. Finally a topographic plot is created which exhibits the
temporal evolution of the spatial filters.



.. rst-class:: horizontal


    *

      .. image:: images/plot_ems_filtering_001.png
            :scale: 47

    *

      .. image:: images/plot_ems_filtering_002.png
            :scale: 47

    *

      .. image:: images/plot_ems_filtering_003.png
            :scale: 47


**Script output**::

  Opening raw data file /data1/agramfort/work/src/mne-python/examples/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
      Read a total of 4 projection items:
          PCA-v1 (1 x 102)  idle
          PCA-v2 (1 x 102)  idle
          PCA-v3 (1 x 102)  idle
          Average EEG reference (1 x 60)  idle
  Current compensation grade : 0
      Range : 6450 ... 48149 =     42.956 ...   320.665 secs
  Ready.
  Reading 0 ... 41699  =      0.000 ...   277.709 secs...
  [done]
  Band-pass filtering from 1 - 45 Hz
  4 projection items activated
  288 matching events found
  No baseline correction applied...
      Rejecting  epoch based on EOG : ['EOG 061']
  No baseline correction applied...
  No baseline correction applied...
  No baseline correction applied...
  No baseline correction applied...
  ...



**Python source code:** :download:`plot_ems_filtering.py <plot_ems_filtering.py>`

.. literalinclude:: plot_ems_filtering.py
    :lines: 25-

**Total running time of the example:**    9 seconds

.. raw:: html

    <div class="social-button-container">
        <div class="social-button">
            <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
        </div>
        <div class="social-button">
            <g:plusone annotation="inline" width="120" size="medium"></g:plusone>
        </div>
        <div class="social-button">
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));
            </script>
            <div class="fb-like" data-send="false" data-width="450" data-show-faces="false"></div>
        </div>
    </div>
    