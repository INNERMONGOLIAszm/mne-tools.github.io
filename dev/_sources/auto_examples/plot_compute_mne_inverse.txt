

.. _sphx_glr_auto_examples_plot_compute_mne_inverse.py:


================================================
Compute MNE-dSPM inverse solution on evoked data
================================================

Compute dSPM inverse solution on MNE evoked dataset
and stores the solution in stc files for visualisation.



.. code-block:: python

    # Author: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)

    import matplotlib.pyplot as plt
    from mne.datasets import sample
    from mne import read_evokeds
    from mne.minimum_norm import apply_inverse, read_inverse_operator

    print(__doc__)

    data_path = sample.data_path()
    fname_inv = data_path + '/MEG/sample/sample_audvis-meg-oct-6-meg-inv.fif'
    fname_evoked = data_path + '/MEG/sample/sample_audvis-ave.fif'
    subjects_dir = data_path + '/subjects'

    snr = 3.0
    lambda2 = 1.0 / snr ** 2
    method = "dSPM"  # use dSPM method (could also be MNE or sLORETA)

    # Load data
    evoked = read_evokeds(fname_evoked, condition=0, baseline=(None, 0))
    inverse_operator = read_inverse_operator(fname_inv)

    # Compute inverse solution
    stc = apply_inverse(evoked, inverse_operator, lambda2, method,
                        pick_ori=None)

    # Save result in stc files
    stc.save('mne_%s_inverse' % method)





.. rst-class:: sphx-glr-script-out

 Out::

    Reading /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis-ave.fif ...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Found the data of interest:
            t =    -199.80 ...     499.49 ms (Left Auditory)
            0 CTF compensation matrices available
            nave = 55 - aspect type = 100
    Projections have already been applied. Setting proj attribute to True.
    Applying baseline correction (mode: mean)
    Reading inverse operator decomposition from /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis-meg-oct-6-meg-inv.fif...
        Reading inverse operator info...
        [done]
        Reading inverse operator decomposition...
        [done]
        305 x 305 full covariance (kind = 1) found.
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Noise covariance matrix read.
        22494 x 22494 diagonal covariance (kind = 2) found.
        Source covariance matrix read.
        22494 x 22494 diagonal covariance (kind = 6) found.
        Orientation priors read.
        22494 x 22494 diagonal covariance (kind = 5) found.
        Depth priors read.
        Did not find the desired covariance matrix (kind = 3)
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        2 source spaces read
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Source spaces transformed to the inverse solution coordinate frame
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a full noise covariance matrix (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Picked 305 channels from the data
    Computing inverse...
    (eigenleads need to be weighted)...
    combining the current components...
    (dSPM)...
    [done]
    Writing STC to disk...
    [done]


View activation time-series


.. code-block:: python

    plt.plot(1e3 * stc.times, stc.data[::100, :].T)
    plt.xlabel('time (ms)')
    plt.ylabel('%s value' % method)
    plt.show()

    # Plot brain in 3D with PySurfer if available
    brain = stc.plot(hemi='rh', subjects_dir=subjects_dir)
    brain.show_view('lateral')

    # use peak getter to move vizualization to the time point of the peak
    vertno_max, time_idx = stc.get_peak(hemi='rh', time_as_index=True)

    brain.set_data_time_index(time_idx)

    # draw marker at maximum peaking vertex
    brain.add_foci(vertno_max, coords_as_verts=True, hemi='rh', color='blue',
                   scale_factor=0.6)
    brain.save_image('dSPM_map.png')



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_compute_mne_inverse_001.png
            :scale: 47

    *

      .. image:: /auto_examples/images/sphx_glr_plot_compute_mne_inverse_002.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    Updating smoothing matrix, be patient..
    Smoothing matrix creation, step 1
    Smoothing matrix creation, step 2
    Smoothing matrix creation, step 3
    Smoothing matrix creation, step 4
    Smoothing matrix creation, step 5
    Smoothing matrix creation, step 6
    Smoothing matrix creation, step 7
    Smoothing matrix creation, step 8
    Smoothing matrix creation, step 9
    Smoothing matrix creation, step 10
    colormap: fmin=3.95e+00 fmid=4.57e+00 fmax=1.77e+01 transparent=1


**Total running time of the script:**
(0 minutes 20.909 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_compute_mne_inverse.py <plot_compute_mne_inverse.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_compute_mne_inverse.ipynb <plot_compute_mne_inverse.ipynb>`
