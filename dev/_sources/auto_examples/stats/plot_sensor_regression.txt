

.. _example_stats_plot_sensor_regression.py:


=====================================
Sensor space least squares regression
=====================================

Predict single trial activity from a continuous variable.
A single-trial regression is performed in each sensor and timepoint
individually, resulting in an Evoked object which contains the
regression coefficient (beta value) for each combination of sensor
and timepoint. Example also shows the T statistics and the associated
p-values.

Note that this example is for educational purposes and that the data used
here do not contain any significant effect.

(See Hauk et al. (2006). The time course of visual word recognition as
revealed by linear regression analysis of ERP data. Neuroimage.)



.. rst-class:: horizontal


    *

      .. image:: images/plot_sensor_regression_001.png
            :scale: 47

    *

      .. image:: images/plot_sensor_regression_002.png
            :scale: 47

    *

      .. image:: images/plot_sensor_regression_003.png
            :scale: 47

    *

      .. image:: images/plot_sensor_regression_004.png
            :scale: 47


**Script output**::

  Opening raw data file /data1/agramfort/work/src/mne-python/examples/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
      Read a total of 4 projection items:
          PCA-v1 (1 x 102)  idle
          PCA-v2 (1 x 102)  idle
          PCA-v3 (1 x 102)  idle
          Average EEG reference (1 x 60)  idle
  Current compensation grade : 0
      Range : 6450 ... 48149 =     42.956 ...   320.665 secs
  Ready.
  Created an SSP operator (subspace dimension = 3)
  4 projection items activated
  145 matching events found
  Reading 514 ... 619  =      3.423 ...     4.122 secs...
  [done]
  Applying baseline correction ... (mode: mean)
  Reading 712 ... 817  =      4.742 ...     5.441 secs...
  [done]
  Applying baseline correction ... (mode: mean)
  Reading 933 ... 1038  =      6.214 ...     6.913 secs...
  [done]
  ...



**Python source code:** :download:`plot_sensor_regression.py <plot_sensor_regression.py>`

.. literalinclude:: plot_sensor_regression.py
    :lines: 19-

**Total running time of the example:**    8 seconds

.. raw:: html

    <div class="social-button-container">
        <div class="social-button">
            <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
        </div>
        <div class="social-button">
            <g:plusone annotation="inline" width="120" size="medium"></g:plusone>
        </div>
        <div class="social-button">
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));
            </script>
            <div class="fb-like" data-send="false" data-width="450" data-show-faces="false"></div>
        </div>
    </div>
    