

.. _sphx_glr_auto_examples_time_frequency_plot_time_frequency_multitaper_sensors.py:


===============================================
Time-frequency analysis using multitaper method
===============================================

This examples computes induced power and intertrial
coherence (ITC) using a multitaper method on a somato sensory MEG data.
The power plot is rendered so that baseline is mean zero.


.. code-block:: python

    # Authors: Hari Bharadwaj <hari@nmr.mgh.harvard.edu>
    #
    # License: BSD (3-clause)

    import numpy as np

    import mne
    from mne import io
    from mne.time_frequency import tfr_multitaper
    from mne.datasets import somato

    print(__doc__)







Load real somatosensory sample data.


.. code-block:: python

    data_path = somato.data_path()
    raw_fname = data_path + '/MEG/somato/sef_raw_sss.fif'
    event_id, tmin, tmax = 1, -1., 3.

    # Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname)
    baseline = (None, 0)
    events = mne.find_events(raw, stim_channel='STI 014')

    # Pick a good channel for somatosensory responses.
    picks = [raw.info['ch_names'].index('MEG 1142'), ]

    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                        baseline=baseline, reject=dict(grad=4000e-13))





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-somato-data/MEG/somato/sef_raw_sss.fif...
    Current compensation grade : 0
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    111 events found
    Events id: [1]
    111 matching events found
    Applying baseline correction (mode: mean)
    0 projection items activated


Calculate power


.. code-block:: python


    freqs = np.arange(5., 50., 2.)  # define frequencies of interest
    n_cycles = freqs / 2.  # 0.5 second time windows for all frequencies

    # Choose time x (full) bandwidth product
    time_bandwidth = 4.0  # With 0.5 s time windows, this gives 8 Hz smoothing

    power, itc = tfr_multitaper(epochs, freqs=freqs, n_cycles=n_cycles,
                                use_fft=True, time_bandwidth=time_bandwidth,
                                return_itc=True, n_jobs=1)

    # Plot results (with baseline correction only for power)
    power.plot([0], baseline=(-0.5, 0), mode='mean', title='MEG 1142 - Power')
    itc.plot([0], title='MEG 1142 - Intertrial Coherence')



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/time_frequency/images/sphx_glr_plot_time_frequency_multitaper_sensors_001.png
            :scale: 47

    *

      .. image:: /auto_examples/time_frequency/images/sphx_glr_plot_time_frequency_multitaper_sensors_002.png
            :scale: 47


.. rst-class:: sphx-glr-script-out

 Out::

    Loading data for 111 events and 1202 original time points ...
    0 bad epochs dropped
    Data is 111 trials and 1 channels
    Multitaper time-frequency analysis for 23 frequencies
    Using 3 tapers
    Applying baseline correction (mode: mean)
    No baseline correction applied


**Total running time of the script:**
(0 minutes 2.277 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_time_frequency_multitaper_sensors.py <plot_time_frequency_multitaper_sensors.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_time_frequency_multitaper_sensors.ipynb <plot_time_frequency_multitaper_sensors.ipynb>`
