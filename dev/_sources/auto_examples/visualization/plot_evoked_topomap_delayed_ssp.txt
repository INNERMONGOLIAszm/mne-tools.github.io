

.. _sphx_glr_auto_examples_visualization_plot_evoked_topomap_delayed_ssp.py:


===============================================
Create topographic ERF maps in delayed SSP mode
===============================================

This script shows how to apply SSP projectors delayed, that is,
at the evoked stage. This is particularly useful to support decisions
related to the trade-off between denoising and preserving signal.
In this example we demonstrate how to use topographic maps for delayed
SSP application.


.. code-block:: python

    # Authors: Denis Engemann <denis.engemann@gmail.com>
    #          Christian Brodbeck <christianbrodbeck@nyu.edu>
    #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)

    import numpy as np
    import mne
    from mne import io
    from mne.datasets import sample

    print(__doc__)

    data_path = sample.data_path()







Set parameters


.. code-block:: python

    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    ecg_fname = data_path + '/MEG/sample/sample_audvis_ecg-proj.fif'
    event_id, tmin, tmax = 1, -0.2, 0.5

    # Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname)
    events = mne.read_events(event_fname)

    # delete EEG projections (we know it's the last one)
    raw.del_proj(-1)
    # add ECG projs for magnetometers
    [raw.add_proj(p) for p in mne.read_proj(ecg_fname) if 'axial' in p['desc']]

    # pick magnetometer channels
    picks = mne.pick_types(raw.info, meg='mag', stim=False, eog=True,
                           include=[], exclude='bads')

    # We will make of the proj `delayed` option to
    # interactively select projections at the evoked stage.
    # more information can be found in the example/plot_evoked_delayed_ssp.py
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                        baseline=(None, 0), reject=dict(mag=4e-12), proj='delayed')

    evoked = epochs.average()  # average epochs and get an Evoked dataset.





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
    Current compensation grade : 0
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
        Read a total of 6 projection items:
            ECG-planar-999--0.200-0.400-PCA-01 (1 x 203)  idle
            ECG-planar-999--0.200-0.400-PCA-02 (1 x 203)  idle
            ECG-axial-999--0.200-0.400-PCA-01 (1 x 102)  idle
            ECG-axial-999--0.200-0.400-PCA-02 (1 x 102)  idle
            ECG-eeg-999--0.200-0.400-PCA-01 (1 x 59)  idle
            ECG-eeg-999--0.200-0.400-PCA-02 (1 x 59)  idle
    1 projection items deactivated
    1 projection items deactivated
    72 matching events found
    Applying baseline correction (mode: mean)
    Entering delayed SSP mode.
    Created an SSP operator (subspace dimension = 5)
        Rejecting  epoch based on MAG : [u'MEG 1711']


Interactively select / deselect the SSP projection vectors


.. code-block:: python


    # set time instants in seconds (from 50 to 150ms in a step of 10ms)
    times = np.arange(0.05, 0.15, 0.01)

    evoked.plot_topomap(times, proj='interactive')
    # Hint: the same works for evoked.plot and evoked.plot_topo



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/visualization/images/sphx_glr_plot_evoked_topomap_delayed_ssp_001.png
            :scale: 47

    *

      .. image:: /auto_examples/visualization/images/sphx_glr_plot_evoked_topomap_delayed_ssp_002.png
            :scale: 47




**Total running time of the script:**
(0 minutes 4.826 seconds)



.. container:: sphx-glr-download

    **Download Python source code:** :download:`plot_evoked_topomap_delayed_ssp.py <plot_evoked_topomap_delayed_ssp.py>`


.. container:: sphx-glr-download

    **Download IPython notebook:** :download:`plot_evoked_topomap_delayed_ssp.ipynb <plot_evoked_topomap_delayed_ssp.ipynb>`
