.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_artifacts_correction_ica.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_artifacts_correction_ica.py:


Artifact Correction with ICA
============================

ICA finds directions in the feature space
corresponding to projections with high non-Gaussianity. We thus obtain
a decomposition into independent components, and the artifact's contribution
is typically localized in only a small number of components.
These components have to be correctly identified and removed.

If EOG or ECG recordings are available, they can be used in ICA to
automatically select the corresponding artifact components from the
decomposition. To do so, you have to first build an :class:`mne.Epochs` object
around blink or heartbeat events.

ICA is implemented in MNE using the :class:`mne.preprocessing.ICA` class,
which we will review here.


.. code-block:: python


    import numpy as np

    import mne
    from mne.datasets import sample

    from mne.preprocessing import ICA
    from mne.preprocessing import create_eog_epochs, create_ecg_epochs

    # getting some data ready
    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'

    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    # 1Hz high pass is often helpful for fitting ICA (already lowpassed @ 40 Hz)
    raw.filter(1., None, n_jobs=1, fir_design='firwin')

    picks_meg = mne.pick_types(raw.info, meg=True, eeg=False, eog=False,
                               stim=False, exclude='bads')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Opening raw data file /home/circleci/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    Setting up high-pass filter at 1 Hz
    l_trans_bandwidth chosen to be 1.0 Hz
    Filter length of 497 samples (3.310 sec) selected


Before applying artifact correction please learn about your actual artifacts
by reading :ref:`sphx_glr_auto_tutorials_plot_artifacts_detection.py`.

.. warning:: ICA is sensitive to low-frequency drifts and therefore
             requires the data to be high-pass filtered prior to fitting.
             Typically, a cutoff frequency of 1 Hz is recommended. Note that
             FIR filters prior to MNE 0.15 used the ``'firwin2'`` design
             method, which generally produces rather shallow filters that
             might not work for ICA processing. Therefore, it is recommended
             to use IIR filters for MNE up to 0.14. In MNE 0.15, FIR filters
             can be designed with the ``'firwin'`` method, which generally
             produces much steeper filters. This method will be the default
             FIR design method in MNE 0.16. In MNE 0.15, you need to
             explicitly set ``fir_design='firwin'`` to use this method. This
             is the recommended filter method for ICA preprocessing.

Fit ICA
-------

First, choose the ICA method. There are currently four possible choices:
`fastica`, `picard`, `infomax` and `extended-infomax`.

.. note:: The default method in MNE is FastICA, which along with Infomax is
          one of the most widely used ICA algorithms. Picard is a
          new algorithm that is expected to converge faster than FastICA and
          Infomax, especially when the aim is to recover accurate maps with
          a low tolerance parameter, see [1]_ for more information.


.. code-block:: python


    method = 'fastica'

    # Choose other parameters
    n_components = 25  # if float, select n_components by explained variance of PCA
    decim = 3  # we need sufficient statistics, not all time points -> saves time

    # we will also set state of the random number generator - ICA is a
    # non-deterministic algorithm, but we want to have the same decomposition
    # and the same order of components each time this tutorial is run
    random_state = 23







Define the ICA object instance


.. code-block:: python

    ica = ICA(n_components=n_components, method=method, random_state=random_state)
    print(ica)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <ICA  |  no decomposition, fit (fastica):  samples, no dimension reduction>


we avoid fitting ICA on crazy environmental artifacts that would
dominate the variance and decomposition


.. code-block:: python

    reject = dict(mag=5e-12, grad=4000e-13)
    ica.fit(raw, picks=picks_meg, decim=decim, reject=reject)
    print(ica)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting ICA to data using 305 channels (please be patient, this may take a while)
    Inferring max_pca_components from picks
        Rejecting  epoch based on MAG : ['MEG 1711']
    Artifact detected in [4242, 4343]
        Rejecting  epoch based on MAG : ['MEG 1711']
    Artifact detected in [5858, 5959]
    Selection by number: 25 components
    Fitting ICA took 3.6s.
    <ICA  |  raw data decomposition, fit (fastica): 13635 samples, 25 components, channels used: "mag"; "grad">


Plot ICA components


.. code-block:: python

    ica.plot_components()  # can you spot some potential bad guys?





.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_002.png
            :class: sphx-glr-multi-img




Component properties
--------------------

Let's take a closer look at properties of first three independent components.


.. code-block:: python


    # first, component 0:
    ica.plot_properties(raw, picks=0)




.. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_003.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using multitaper spectrum estimation with 7 DPSS windows


we can see that the data were filtered so the spectrum plot is not
very informative, let's change that:


.. code-block:: python

    ica.plot_properties(raw, picks=0, psd_args={'fmax': 35.})




.. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using multitaper spectrum estimation with 7 DPSS windows


we can also take a look at multiple different components at once:


.. code-block:: python

    ica.plot_properties(raw, picks=[1, 2], psd_args={'fmax': 35.})




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_005.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_006.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using multitaper spectrum estimation with 7 DPSS windows


Instead of opening individual figures with component properties, we can
also pass an instance of Raw or Epochs in ``inst`` argument to
``ica.plot_components``. This would allow us to open component properties
interactively by clicking on individual component topomaps. In the notebook
this works only when running matplotlib in interactive mode
(``%matplotlib``).


.. code-block:: python


    # uncomment the code below to test the interactive mode of plot_components:
    # ica.plot_components(picks=range(10), inst=raw)







Advanced artifact detection
---------------------------

Let's use a more efficient way to find artifacts


.. code-block:: python


    eog_average = create_eog_epochs(raw, reject=dict(mag=5e-12, grad=4000e-13),
                                    picks=picks_meg).average()

    eog_epochs = create_eog_epochs(raw, reject=reject)  # get single EOG trials
    eog_inds, scores = ica.find_bads_eog(eog_epochs)  # find via correlation

    ica.plot_scores(scores, exclude=eog_inds)  # look at r scores of components
    # we can see that only one component is highly correlated and that this
    # component got detected by our correlation analysis (red).

    ica.plot_sources(eog_average, exclude=eog_inds)  # look at source time course




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_007.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_008.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    EOG channel index for this subject is: [375]
    Filtering the data to remove DC offset to help distinguish blinks from saccades
    Setting up band-pass filter from 2 - 45 Hz
    Filter length of 2048 samples (13.639 sec) selected
    Setting up band-pass filter from 1 - 10 Hz
    Filter length of 2048 samples (13.639 sec) selected
    Now detecting blinks and generating corresponding events
    Number of EOG events detected : 46
    46 matching events found
    No baseline correction applied
    Not setting metadata
    Created an SSP operator (subspace dimension = 3)
    Loading data for 46 events and 151 original time points ...
    0 bad epochs dropped
    EOG channel index for this subject is: [375]
    Filtering the data to remove DC offset to help distinguish blinks from saccades
    Setting up band-pass filter from 2 - 45 Hz
    Filter length of 2048 samples (13.639 sec) selected
    Setting up band-pass filter from 1 - 10 Hz
    Filter length of 2048 samples (13.639 sec) selected
    Now detecting blinks and generating corresponding events
    Number of EOG events detected : 46
    46 matching events found
    No baseline correction applied
    Not setting metadata
    Created an SSP operator (subspace dimension = 4)
    Loading data for 46 events and 151 original time points ...
    0 bad epochs dropped


We can take a look at the properties of that component, now using the
data epoched with respect to EOG events.
We will also use a little bit of smoothing along the trials axis in the
epochs image:


.. code-block:: python

    ica.plot_properties(eog_epochs, picks=eog_inds, psd_args={'fmax': 35.},
                        image_args={'sigma': 1.})




.. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_009.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using multitaper spectrum estimation with 7 DPSS windows


That component is showing a prototypical average vertical EOG time course.

Pay attention to the labels, a customized read-out of the
``mne.preprocessing.ICA.labels_``:


.. code-block:: python

    print(ica.labels_)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'eog/0/EOG 061': [2], 'eog': [2]}


These labels were used by the plotters and are added automatically
by artifact detection functions. You can also manually edit them to annotate
components.

Now let's see how we would modify our signals if we removed this component
from the data.


.. code-block:: python

    ica.plot_overlay(eog_average, exclude=eog_inds, show=False)
    # red -> before, black -> after. Yes! We remove quite a lot!

    # to definitely register this component as a bad one to be removed
    # there is the ``ica.exclude`` attribute, a simple Python list
    ica.exclude.extend(eog_inds)

    # from now on the ICA will reject this component even if no exclude
    # parameter is passed, and this information will be stored to disk
    # on saving

    # uncomment this for reading and writing
    # ica.save('my-ica.fif')
    # ica = read_ica('my-ica.fif')




.. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_010.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Transforming to ICA space (25 components)
    Zeroing out 1 ICA components


Note that nothing is yet removed from the raw data. To remove the effects of
the rejected components,
:meth:`the apply method <mne.preprocessing.ICA.apply>` must be called.
Here we apply it on the copy of the first ten seconds, so that the rest of
this tutorial still works as intended.


.. code-block:: python

    raw_copy = raw.copy().crop(0, 10)
    ica.apply(raw_copy)
    raw_copy.plot()  # check the result




.. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_011.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Transforming to ICA space (25 components)
    Zeroing out 1 ICA components


Exercise: find and remove ECG artifacts using ICA!


.. code-block:: python

    ecg_epochs = create_ecg_epochs(raw, tmin=-.5, tmax=.5)
    ecg_inds, scores = ica.find_bads_ecg(ecg_epochs, method='ctps')
    ica.plot_properties(ecg_epochs, picks=ecg_inds, psd_args={'fmax': 35.})




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_012.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_013.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_014.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reconstructing ECG signal from Magnetometers
    Setting up band-pass filter from 8 - 16 Hz
    Filter length of 2048 samples (13.639 sec) selected
    Number of ECG events detected : 284 (average pulse 61 / min.)
    284 matching events found
    No baseline correction applied
    Not setting metadata
    Created an SSP operator (subspace dimension = 4)
    Loading data for 284 events and 151 original time points ...
    0 bad epochs dropped
    Reconstructing ECG signal from Magnetometers
        Using multitaper spectrum estimation with 7 DPSS windows


What if we don't have an EOG channel?
-------------------------------------

We could either:

1. make a bipolar reference from frontal EEG sensors and use as virtual EOG
   channel. This can be tricky though as you can only hope that the frontal
   EEG channels only reflect EOG and not brain dynamics in the prefrontal
   cortex.
2. go for a semi-automated approach, using template matching.

In MNE-Python option 2 is easily achievable and it might give better results,
so let's have a look at it.


.. code-block:: python


    from mne.preprocessing.ica import corrmap  # noqa







The idea behind corrmap is that artifact patterns are similar across subjects
and can thus be identified by correlating the different patterns resulting
from each solution with a template. The procedure is therefore
semi-automatic. :func:`mne.preprocessing.corrmap` hence takes a list of
ICA solutions and a template, that can be an index or an array.

As we don't have different subjects or runs available today, here we will
simulate ICA solutions from different subjects by fitting ICA models to
different parts of the same recording. Then we will use one of the components
from our original ICA as a template in order to detect sufficiently similar
components in the simulated ICAs.

The following block of code simulates having ICA solutions from different
runs/subjects so it should not be used in real analysis - use independent
data sets instead.


.. code-block:: python


    # We'll start by simulating a group of subjects or runs from a subject
    start, stop = [0, raw.times[-1]]
    intervals = np.linspace(start, stop, 4, dtype=np.float)
    icas_from_other_data = list()
    raw.pick_types(meg=True, eeg=False)  # take only MEG channels
    for ii, start in enumerate(intervals):
        if ii + 1 < len(intervals):
            stop = intervals[ii + 1]
            print('fitting ICA from {0} to {1} seconds'.format(start, stop))
            this_ica = ICA(n_components=n_components, method=method).fit(
                raw, start=start, stop=stop, reject=reject)
            icas_from_other_data.append(this_ica)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    fitting ICA from 0.0 to 92.56956214990684 seconds
    Fitting ICA to data using 305 channels (please be patient, this may take a while)
    Inferring max_pca_components from picks
        Rejecting  epoch based on MAG : ['MEG 1711']
    Artifact detected in [12642, 12943]
    Selection by number: 25 components
    Fitting ICA took 8.3s.
    fitting ICA from 92.56956214990684 to 185.1391242998137 seconds
    Fitting ICA to data using 305 channels (please be patient, this may take a while)
    Inferring max_pca_components from picks
        Rejecting  epoch based on MAG : ['MEG 1711']
    Artifact detected in [3612, 3913]
    Selection by number: 25 components
    Fitting ICA took 6.4s.
    fitting ICA from 185.1391242998137 to 277.7086864497205 seconds
    Fitting ICA to data using 305 channels (please be patient, this may take a while)
    Inferring max_pca_components from picks
        Rejecting  epoch based on MAG : ['MEG 1411']
    Artifact detected in [12341, 12642]
    Selection by number: 25 components
    Fitting ICA took 5.7s.


Remember, don't do this at home! Start by reading in a collection of ICA
solutions instead. Something like:

``icas = [mne.preprocessing.read_ica(fname) for fname in ica_fnames]``


.. code-block:: python

    print(icas_from_other_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [<ICA  |  raw data decomposition, fit (fastica): 13545 samples, 25 components, channels used: "mag"; "grad">, <ICA  |  raw data decomposition, fit (fastica): 13545 samples, 25 components, channels used: "mag"; "grad">, <ICA  |  raw data decomposition, fit (fastica): 13545 samples, 25 components, channels used: "mag"; "grad">]


We use our original ICA as reference.


.. code-block:: python

    reference_ica = ica







Investigate our reference ICA:


.. code-block:: python

    reference_ica.plot_components()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_015.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_016.png
            :class: sphx-glr-multi-img




Which one is the bad EOG component?
Here we rely on our previous detection algorithm. You would need to decide
yourself if no automatic detection was available.


.. code-block:: python

    reference_ica.plot_sources(eog_average, exclude=eog_inds)




.. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_017.png
    :class: sphx-glr-single-img




Indeed it looks like an EOG, also in the average time course.

We construct a list where our reference run is the first element. Then we
can detect similar components from the other runs (the other ICA objects)
using :func:`mne.preprocessing.corrmap`. So our template must be a tuple like
(reference_run_index, component_index):


.. code-block:: python

    icas = [reference_ica] + icas_from_other_data
    template = (0, eog_inds[0])







Now we can run the CORRMAP algorithm.


.. code-block:: python

    fig_template, fig_detected = corrmap(icas, template=template, label="blinks",
                                         show=True, threshold=.8, ch_type='mag')




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_018.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_artifacts_correction_ica_019.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Median correlation with constructed map: 0.996
    Displaying selected ICs per subject.
    At least 1 IC detected for each subject.


Nice, we have found similar ICs from the other (simulated) runs!
In this way, you can detect a type of artifact semi-automatically for example
for all subjects in a study.
The detected template can also be retrieved as an array and stored; this
array can be used as an alternative template to
:func:`mne.preprocessing.corrmap`.


.. code-block:: python

    eog_component = reference_ica.get_components()[:, eog_inds[0]]







If you calculate a new ICA solution, you can provide this array instead of
specifying the template in reference to the list of ICA objects you want
to run CORRMAP on. (Of course, the retrieved component map arrays can
also be used for other purposes than artifact correction.)

You can also use SSP to correct for artifacts. It is a bit simpler and
faster but also less precise than ICA and requires that you know the event
timing of your artifact.
See :ref:`sphx_glr_auto_tutorials_plot_artifacts_correction_ssp.py`.

References
----------
.. [1] Ablin, P., Cardoso, J.F., Gramfort, A., 2017. Faster Independent
       Component Analysis by preconditioning with Hessian approximations.
       arXiv:1706.08171


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  14.015 seconds)

**Estimated memory usage:**  422 MB


.. _sphx_glr_download_auto_tutorials_plot_artifacts_correction_ica.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_artifacts_correction_ica.py <plot_artifacts_correction_ica.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_artifacts_correction_ica.ipynb <plot_artifacts_correction_ica.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
