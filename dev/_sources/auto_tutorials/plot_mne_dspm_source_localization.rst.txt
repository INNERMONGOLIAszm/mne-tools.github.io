.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_mne_dspm_source_localization.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_mne_dspm_source_localization.py:


Source localization with MNE/dSPM/sLORETA/eLORETA
=================================================

The aim of this tutorial is to teach you how to compute and apply a linear
inverse method such as MNE/dSPM/sLORETA/eLORETA on evoked/raw/epochs data.


.. code-block:: python


    # sphinx_gallery_thumbnail_number = 10

    import numpy as np
    import matplotlib.pyplot as plt

    import mne
    from mne.datasets import sample
    from mne.minimum_norm import make_inverse_operator, apply_inverse







Process MEG data


.. code-block:: python


    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'

    raw = mne.io.read_raw_fif(raw_fname)  # already has an average reference
    events = mne.find_events(raw, stim_channel='STI 014')

    event_id = dict(aud_l=1)  # event trigger and conditions
    tmin = -0.2  # start of each epoch (200ms before the trigger)
    tmax = 0.5  # end of each epoch (500ms after the trigger)
    raw.info['bads'] = ['MEG 2443', 'EEG 053']
    picks = mne.pick_types(raw.info, meg=True, eeg=False, eog=True,
                           exclude='bads')
    baseline = (None, 0)  # means from the first instant to t = 0
    reject = dict(grad=4000e-13, mag=4e-12, eog=150e-6)

    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, proj=True, picks=picks,
                        baseline=baseline, reject=reject)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Opening raw data file /home/circleci/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    319 events found
    Event IDs: [ 1  2  3  4  5 32]
    72 matching events found
    Applying baseline correction (mode: mean)
    Not setting metadata
    Created an SSP operator (subspace dimension = 3)
    4 projection items activated


Compute regularized noise covariance
------------------------------------

For more details see :ref:`tut_compute_covariance`.


.. code-block:: python


    noise_cov = mne.compute_covariance(
        epochs, tmax=0., method=['shrunk', 'empirical'], rank=None, verbose=True)

    fig_cov, fig_spectra = mne.viz.plot_cov(noise_cov, raw.info)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_002.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading data for 72 events and 106 original time points ...
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on MAG : ['MEG 1711']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
        Rejecting  epoch based on EOG : ['EOG 061']
    17 bad epochs dropped
        Created an SSP operator (subspace dimension = 3)
    estimated rank (mag + grad): 302
    Setting small MEG eigenvalues to zero.
    Not doing PCA for MEG.
    Reducing data rank from 305 -> 302
    Estimating covariance using SHRUNK
    Done.
    Estimating covariance using EMPIRICAL
    Done.
    Using cross-validation to select the best estimator.
    Number of samples used : 1705
    log-likelihood on unseen data (descending order):
       shrunk: -1466.585
       empirical: -1574.608
    selecting best estimator: shrunk
    [done]


Compute the evoked response
---------------------------
Let's just use MEG channels for simplicity.


.. code-block:: python


    evoked = epochs.average().pick_types(meg=True)
    evoked.plot(time_unit='s')
    evoked.plot_topomap(times=np.linspace(0.05, 0.15, 5), ch_type='mag',
                        time_unit='s')

    # Show whitening
    evoked.plot_white(noise_cov, time_unit='s')

    del epochs  # to save memory




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_003.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_004.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_005.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    8 projection items activated
    estimated rank (grad): 203
    Created an SSP operator (subspace dimension = 3)
    8 projection items activated
    estimated rank (mag): 99
        Created an SSP operator (subspace dimension = 3)
    Setting small MEG eigenvalues to zero.
    Not doing PCA for MEG.
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)


Inverse modeling: MNE/dSPM on evoked and raw data
-------------------------------------------------


.. code-block:: python


    # Read the forward solution and compute the inverse operator
    fname_fwd = data_path + '/MEG/sample/sample_audvis-meg-oct-6-fwd.fif'
    fwd = mne.read_forward_solution(fname_fwd)

    # make an MEG inverse operator
    info = evoked.info
    inverse_operator = make_inverse_operator(info, fwd, noise_cov,
                                             loose=0.2, depth=0.8)
    del fwd

    # You can write it to disk with::
    #
    #     >>> from mne.minimum_norm import write_inverse_operator
    #     >>> write_inverse_operator('sample_audvis-meg-oct-6-inv.fif',
    #                                inverse_operator)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading forward solution from /home/circleci/mne_data/MNE-sample-data/MEG/sample/sample_audvis-meg-oct-6-fwd.fif...
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        2 source spaces read
        Desired named matrix (kind = 3523) not available
        Read MEG forward solution (7498 sources, 306 channels, free orientations)
        Source spaces transformed to the forward solution coordinate frame
    Converting forward solution to surface orientation
        Average patch normals will be employed in the rotation to the local surface coordinates....
        Converting to surface-based source orientations...
        [done]
    Computing inverse operator with 305 channels.
        Created an SSP operator (subspace dimension = 3)
    estimated rank (mag + grad): 302
    Setting small MEG eigenvalues to zero.
    Not doing PCA for MEG.
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)
    Creating the depth weighting matrix...
        203 planar channels
        limit = 7265/7498 = 10.037795
        scale = 2.52065e-08 exp = 0.8
    Computing inverse operator with 305 channels.
    Creating the source covariance matrix
    Applying loose dipole orientations. Loose value of 0.2.
    Whitening the forward solution.
    Adjusting source covariance matrix.
    Computing SVD of whitened and weighted lead field matrix.
        largest singular value = 4.70788
        scaling factor to adjust the trace = 8.80625e+18


Compute inverse solution
------------------------


.. code-block:: python


    method = "dSPM"
    snr = 3.
    lambda2 = 1. / snr ** 2
    stc, residual = apply_inverse(evoked, inverse_operator, lambda2,
                                  method=method, pick_ori=None,
                                  return_residual=True, verbose=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Applying inverse operator to "aud_l"...
        Picked 305 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained  66.1% variance
        Combining the current components...
        dSPM...
    [done]


Visualization
-------------
View activation time-series


.. code-block:: python


    plt.figure()
    plt.plot(1e3 * stc.times, stc.data[::100, :].T)
    plt.xlabel('time (ms)')
    plt.ylabel('%s value' % method)
    plt.show()




.. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_006.png
    :class: sphx-glr-single-img




Examine the original data and the residual after fitting:


.. code-block:: python


    fig, axes = plt.subplots(2, 1)
    evoked.plot(axes=axes)
    for ax in axes:
        ax.texts = []
        for line in ax.lines:
            line.set_color('#98df81')
    residual.plot(axes=axes)




.. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_007.png
    :class: sphx-glr-single-img




Here we use peak getter to move visualization to the time point of the peak
and draw a marker at the maximum peak vertex.


.. code-block:: python


    vertno_max, time_max = stc.get_peak(hemi='rh')

    subjects_dir = data_path + '/subjects'
    surfer_kwargs = dict(
        hemi='rh', subjects_dir=subjects_dir,
        clim=dict(kind='value', lims=[8, 12, 15]), views='lateral',
        initial_time=time_max, time_unit='s', size=(800, 800), smoothing_steps=5)
    brain = stc.plot(**surfer_kwargs)
    brain.add_foci(vertno_max, coords_as_verts=True, hemi='rh', color='blue',
                   scale_factor=0.6, alpha=0.5)
    brain.add_text(0.1, 0.9, 'dSPM (plus location of maximal activation)', 'title',
                   font_size=14)




.. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_008.png
    :class: sphx-glr-single-img




Morph data to average brain
---------------------------


.. code-block:: python


    # setup source morph
    morph = mne.compute_source_morph(
        src=inverse_operator['src'], subject_from=stc.subject,
        subject_to='fsaverage', spacing=5,  # to ico-5
        subjects_dir=subjects_dir)
    # morph data
    stc_fsaverage = morph.apply(stc)

    brain = stc_fsaverage.plot(**surfer_kwargs)
    brain.add_text(0.1, 0.9, 'Morphed to fsaverage', 'title', font_size=20)
    del stc_fsaverage




.. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_009.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    surface source space inferred...
    Computing morph matrix...
        Left-hemisphere map read.
        Right-hemisphere map read.
        17 smooth iterations done.
        14 smooth iterations done.
    [done]
    [done]


Dipole orientations
-------------------
The ``pick_ori`` parameter of the
:func:`mne.minimum_norm.apply_inverse` function controls
the orientation of the dipoles. One useful setting is ``pick_ori='vector'``,
which will return an estimate that does not only contain the source power at
each dipole, but also the orientation of the dipoles.


.. code-block:: python


    stc_vec = apply_inverse(evoked, inverse_operator, lambda2,
                            method=method, pick_ori='vector')
    brain = stc_vec.plot(**surfer_kwargs)
    brain.add_text(0.1, 0.9, 'Vector solution', 'title', font_size=20)
    del stc_vec




.. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_010.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Applying inverse operator to "aud_l"...
        Picked 305 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained  66.1% variance
        dSPM...
    [done]


Note that there is a relationship between the orientation of the dipoles and
the surface of the cortex. For this reason, we do not use an inflated
cortical surface for visualization, but the original surface used to define
the source space.

For more information about dipole orientations, see
:ref:`sphx_glr_auto_tutorials_plot_dipole_orientations.py`.

Now let's look at each solver:


.. code-block:: python


    for mi, (method, lims) in enumerate((('dSPM', [8, 12, 15]),
                                         ('sLORETA', [3, 5, 7]),
                                         ('eLORETA', [0.75, 1.25, 1.75]),)):
        surfer_kwargs['clim']['lims'] = lims
        stc = apply_inverse(evoked, inverse_operator, lambda2,
                            method=method, pick_ori=None)
        brain = stc.plot(figure=mi, **surfer_kwargs)
        brain.add_text(0.1, 0.9, method, 'title', font_size=20)
        del stc



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_011.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_012.png
            :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_plot_mne_dspm_source_localization_013.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Applying inverse operator to "aud_l"...
        Picked 305 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained  66.1% variance
        Combining the current components...
        dSPM...
    [done]
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)
        Computing noise-normalization factors (sLORETA)...
    [done]
    Applying inverse operator to "aud_l"...
        Picked 305 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained  66.1% variance
        Combining the current components...
        sLORETA...
    [done]
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 55
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a noise covariance matrix with rank 302 (3 small eigenvalues omitted)
        Computing noise-normalization factors (eLORETA)...
            Using uniform orientation weights
            Fitting up to 20 iterations (this make take a while)...
            Converged on iteration 10 (3.8e-07 < 1e-06)
            Assembling eLORETA kernel and modifying inverse
    [done]
    Applying inverse operator to "aud_l"...
        Picked 305 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained -4414133928772844912640.0% variance
        Combining the current components...
    [done]



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  59.728 seconds)

**Estimated memory usage:**  63 MB


.. _sphx_glr_download_auto_tutorials_plot_mne_dspm_source_localization.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_mne_dspm_source_localization.py <plot_mne_dspm_source_localization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_mne_dspm_source_localization.ipynb <plot_mne_dspm_source_localization.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
