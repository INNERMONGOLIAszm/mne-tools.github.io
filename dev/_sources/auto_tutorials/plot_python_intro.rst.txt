.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_plot_python_intro.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_python_intro.py:


.. _tut_intro_python:

Introduction to Python
======================

`Python <https://www.python.org/>`_ is a modern general-purpose object-oriented
high-level programming language. First make sure you have a working Python
environment and dependencies (see :ref:`install_python_and_mne_python`). If you
are completely new to Python, don't worry, it's just like any other programming
language, only easier. Here are a few great resources to get you started:

* `SciPy lectures <http://scipy-lectures.github.io>`_
* `Learn X in Y minutes: Python <https://learnxinyminutes.com/docs/python/>`_
* `NumPy for MATLAB users <https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html>`_

We highly recommend watching the SciPy videos and reading through these sites
to get a sense of how scientific computing is done in Python.

Here are few important points to familiarize yourself with Python. First,
everything is dynamically typed. There is no need to declare and initialize
data structures or variables separately.


.. code-block:: python


    a = 3
    print(type(a))
    b = [1, 2.5, 'This is a string']
    print(type(b))
    c = 'Hello world!'
    print(type(c))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'int'>
    <class 'list'>
    <class 'str'>


Second, if you have a MATLAB background remember that indexing in Python
starts from zero (and is done with square brackets):


.. code-block:: python

    a = [1, 2, 3, 4]
    print('This is the zeroth value in the list: {}'.format(a[0]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    This is the zeroth value in the list: 1


Finally, often there is no need to reinvent the wheel. SciPy and NumPy are
battle-hardened libraries that offer a vast variety of functions for most
needs. Consult the documentation and remember that you can always ask the
IPython interpreter for help with a question mark at the beginning or end of
a function:

     >>> import numpy as np
     >>> np.arange?


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.536 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_auto_tutorials_plot_python_intro.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_python_intro.py <plot_python_intro.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_python_intro.ipynb <plot_python_intro.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
