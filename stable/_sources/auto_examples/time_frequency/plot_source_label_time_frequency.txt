

.. _sphx_glr_auto_examples_time_frequency_plot_source_label_time_frequency.py:


=========================================================
Compute power and phase lock in label of the source space
=========================================================

Compute time-frequency maps of power and phase lock in the source space.
The inverse method is linear based on dSPM inverse operator.

The example also shows the difference in the time-frequency maps
when they are computed with and without subtracting the evoked response
from each epoch. The former results in induced activity only while the
latter also includes evoked (stimulus-locked) activity.



.. code-block:: python

    # Authors: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt

    import mne
    from mne import io
    from mne.datasets import sample
    from mne.minimum_norm import read_inverse_operator, source_induced_power

    print(__doc__)







Set parameters



.. code-block:: python

    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_raw.fif'
    fname_inv = data_path + '/MEG/sample/sample_audvis-meg-oct-6-meg-inv.fif'
    label_name = 'Aud-rh'
    fname_label = data_path + '/MEG/sample/labels/%s.label' % label_name

    tmin, tmax, event_id = -0.2, 0.5, 2

    # Setup for reading the raw data
    raw = io.read_raw_fif(raw_fname)
    events = mne.find_events(raw, stim_channel='STI 014')
    inverse_operator = read_inverse_operator(fname_inv)

    include = []
    raw.info['bads'] += ['MEG 2443', 'EEG 053']  # bads + 2 more

    # Picks MEG channels
    picks = mne.pick_types(raw.info, meg=True, eeg=False, eog=True,
                           stim=False, include=include, exclude='bads')
    reject = dict(grad=4000e-13, mag=4e-12, eog=150e-6)

    # Load epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                        baseline=(None, 0), reject=reject,
                        preload=True)

    # Compute a source estimate per frequency band including and excluding the
    # evoked response
    frequencies = np.arange(7, 30, 2)  # define frequencies of interest
    label = mne.read_label(fname_label)
    n_cycles = frequencies / 3.  # different number of cycle per frequency

    # subtract the evoked response in order to exclude evoked activity
    epochs_induced = epochs.copy().subtract_evoked()

    plt.close('all')

    for ii, (this_epochs, title) in enumerate(zip([epochs, epochs_induced],
                                                  ['evoked + induced',
                                                   'induced only'])):
        # compute the source space power and phase lock
        power, phase_lock = source_induced_power(
            this_epochs, inverse_operator, frequencies, label, baseline=(-0.1, 0),
            baseline_mode='percent', n_cycles=n_cycles, n_jobs=1)

        power = np.mean(power, axis=0)  # average over sources
        phase_lock = np.mean(phase_lock, axis=0)  # average over sources
        times = epochs.times

        ##########################################################################
        # View time-frequency plots
        plt.subplots_adjust(0.1, 0.08, 0.96, 0.94, 0.2, 0.43)
        plt.subplot(2, 2, 2 * ii + 1)
        plt.imshow(20 * power,
                   extent=[times[0], times[-1], frequencies[0], frequencies[-1]],
                   aspect='auto', origin='lower', vmin=0., vmax=30., cmap='RdBu_r')
        plt.xlabel('Time (s)')
        plt.ylabel('Frequency (Hz)')
        plt.title('Power (%s)' % title)
        plt.colorbar()

        plt.subplot(2, 2, 2 * ii + 2)
        plt.imshow(phase_lock,
                   extent=[times[0], times[-1], frequencies[0], frequencies[-1]],
                   aspect='auto', origin='lower', vmin=0, vmax=0.7,
                   cmap='RdBu_r')
        plt.xlabel('Time (s)')
        plt.ylabel('Frequency (Hz)')
        plt.title('Phase-lock (%s)' % title)
        plt.colorbar()

    plt.show()



.. image:: /auto_examples/time_frequency/images/sphx_glr_plot_source_label_time_frequency_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_raw.fif...
        Read a total of 3 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
    Current compensation grade : 0
        Range : 25800 ... 192599 =     42.956 ...   320.670 secs
    Ready.
    Adding average EEG reference projection.
    1 projection items deactivated
    320 events found
    Events id: [ 1  2  3  4  5 32]
    Reading inverse operator decomposition from /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis-meg-oct-6-meg-inv.fif...
        Reading inverse operator info...
        [done]
        Reading inverse operator decomposition...
        [done]
        305 x 305 full covariance (kind = 1) found.
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Noise covariance matrix read.
        22494 x 22494 diagonal covariance (kind = 2) found.
        Source covariance matrix read.
        22494 x 22494 diagonal covariance (kind = 6) found.
        Orientation priors read.
        22494 x 22494 diagonal covariance (kind = 5) found.
        Depth priors read.
        Did not find the desired covariance matrix (kind = 3)
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        Reading a source space...
        Computing patch statistics...
        Patch information added...
        Distance information added...
        [done]
        2 source spaces read
        Read a total of 4 projection items:
            PCA-v1 (1 x 102) active
            PCA-v2 (1 x 102) active
            PCA-v3 (1 x 102) active
            Average EEG reference (1 x 60) active
        Source spaces transformed to the inverse solution coordinate frame
    73 matching events found
    Applying baseline correction (mode: mean)
    Created an SSP operator (subspace dimension = 3)
    4 projection items activated
    Loading data for 73 events and 421 original time points ...
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on MAG : [u'MEG 1711']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
    14 bad epochs dropped
    Subtracting Evoked from Epochs
        The following channels are not included in the subtraction: EOG 061
    [done]
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 1
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a full noise covariance matrix (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Picked 305 channels from the data
    Computing inverse...
    (eigenleads need to be weighted)...
    Reducing data rank to 81
    Computing source power ...
    Applying baseline correction (mode: percent)
    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 1
        Created the regularized inverter
        Created an SSP operator (subspace dimension = 3)
        Created the whitener using a full noise covariance matrix (3 small eigenvalues omitted)
        Computing noise-normalization factors (dSPM)...
    [done]
    Picked 305 channels from the data
    Computing inverse...
    (eigenleads need to be weighted)...
    Reducing data rank to 81
    Computing source power ...
    Applying baseline correction (mode: percent)


**Total running time of the script:**
(0 minutes 20.614 seconds)



.. container:: sphx-glr-download

    :download:`Download Python source code: plot_source_label_time_frequency.py <plot_source_label_time_frequency.py>`


.. container:: sphx-glr-download

    :download:`Download Jupyter notebook: plot_source_label_time_frequency.ipynb <plot_source_label_time_frequency.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
