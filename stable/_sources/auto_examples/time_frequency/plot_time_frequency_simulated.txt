

.. _example_time_frequency_plot_time_frequency_simulated.py:


========================================================
Time-frequency on simulated data (Multitaper vs. Morlet)
========================================================

This examples demonstrates on simulated data the different time-frequency
estimation methods. It shows the time-frequency resolution trade-off
and the problem of estimation variance.



.. rst-class:: horizontal


    *

      .. image:: images/plot_time_frequency_simulated_001.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_simulated_002.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_simulated_003.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_simulated_004.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_simulated_005.png
            :scale: 47

    *

      .. image:: images/plot_time_frequency_simulated_006.png
            :scale: 47


**Script output**::

  Data is 40 trials and 2 channels
  Multitaper time-frequency analysis for 32 frequencies
  Using 1 tapers
  Applying baseline correction 'mean' during (0.0, 0.1)
  Applying baseline correction ... (mode: mean)
  Data is 40 trials and 2 channels
  Multitaper time-frequency analysis for 32 frequencies
  Using 3 tapers
  Applying baseline correction 'mean' during (0.0, 0.1)
  Applying baseline correction ... (mode: mean)
  Data is 40 trials and 2 channels
  Multitaper time-frequency analysis for 32 frequencies
  Using 7 tapers
  Applying baseline correction 'mean' during (0.0, 0.1)
  Applying baseline correction ... (mode: mean)
  The input signal is shorter (1000) than "n_fft" (1024). Applying zero padding.
  Applying baseline correction 'mean' during (0.0, 0.1)
  Applying baseline correction ... (mode: mean)
  The input signal is shorter (1000) than "n_fft" (1024). Applying zero padding.
  Applying baseline correction 'mean' during (0.0, 0.1)
  ...



**Python source code:** :download:`plot_time_frequency_simulated.py <plot_time_frequency_simulated.py>`

.. literalinclude:: plot_time_frequency_simulated.py
    :lines: 10-

**Total running time of the example:**   14 seconds

.. raw:: html

    <div class="social-button-container">
        <div class="social-button">
            <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
        </div>
        <div class="social-button">
            <g:plusone annotation="inline" width="120" size="medium"></g:plusone>
        </div>
        <div class="social-button">
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));
            </script>
            <div class="fb-like" data-send="false" data-width="450" data-show-faces="false"></div>
        </div>
    </div>
    