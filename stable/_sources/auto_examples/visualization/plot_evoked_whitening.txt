

.. _example_visualization_plot_evoked_whitening.py:


=============================================
Whitening evoked data with a noise covariance
=============================================

Evoked data are loaded and then whitened using a given noise covariance
matrix. It's an excellent quality check to see if baseline signals match
the assumption of Gaussian white noise from which we expect values around
0 with less than 2 standard deviations. Covariance estimation and diagnostic
plots are based on [1].

References
----------
[1] Engemann D. and Gramfort A. (2015) Automated model selection in covariance
    estimation and spatial whitening of MEG and EEG signals, vol. 108,
    328-342, NeuroImage.




.. rst-class:: horizontal


    *

      .. image:: images/plot_evoked_whitening_001.png
            :scale: 47

    *

      .. image:: images/plot_evoked_whitening_002.png
            :scale: 47


**Script output**::

  Opening raw data file /data1/agramfort/work/src/mne-python/examples/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
      Read a total of 4 projection items:
          PCA-v1 (1 x 102)  idle
          PCA-v2 (1 x 102)  idle
          PCA-v3 (1 x 102)  idle
          Average EEG reference (1 x 60)  idle
  Current compensation grade : 0
      Range : 6450 ... 48149 =     42.956 ...   320.665 secs
  Ready.
  Reading 0 ... 41699  =      0.000 ...   277.709 secs...
  [done]
  Band-pass filtering from 1 - 40 Hz
  Created an SSP operator (subspace dimension = 4)
  4 projection items activated
  73 matching events found
  No baseline correction applied...
      Rejecting  epoch based on EEG : ['EEG 002', 'EEG 003', 'EEG 007']
  No baseline correction applied...
  No baseline correction applied...
  No baseline correction applied...
  ...



**Python source code:** :download:`plot_evoked_whitening.py <plot_evoked_whitening.py>`

.. literalinclude:: plot_evoked_whitening.py
    :lines: 19-

**Total running time of the example:**   54 seconds

.. raw:: html

    <div class="social-button-container">
        <div class="social-button">
            <a href="https://twitter.com/share" class="twitter-share-button">Tweet</a>
        </div>
        <div class="social-button">
            <g:plusone annotation="inline" width="120" size="medium"></g:plusone>
        </div>
        <div class="social-button">
            <div id="fb-root"></div>
            <script>(function(d, s, id) {
                var js, fjs = d.getElementsByTagName(s)[0];
                if (d.getElementById(id)) return;
                js = d.createElement(s); js.id = id;
                js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
                fjs.parentNode.insertBefore(js, fjs);
                }(document, 'script', 'facebook-jssdk'));
            </script>
            <div class="fb-like" data-send="false" data-width="450" data-show-faces="false"></div>
        </div>
    </div>
    