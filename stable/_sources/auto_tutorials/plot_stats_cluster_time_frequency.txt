

.. _sphx_glr_auto_tutorials_plot_stats_cluster_time_frequency.py:


.. _tut_stats_cluster_sensor_2samp_tfr:

=========================================================================
Non-parametric between conditions cluster statistic on single trial power
=========================================================================

This script shows how to compare clusters in time-frequency
power estimates between conditions. It uses a non-parametric
statistical procedure based on permutations and cluster
level statistics.

The procedure consists in:

  - extracting epochs for 2 conditions
  - compute single trial power estimates
  - baseline line correct the power estimates (power ratios)
  - compute stats to see if the power estimates are significantly different
    between conditions.




.. code-block:: python

    # Authors: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
    #
    # License: BSD (3-clause)

    import numpy as np
    import matplotlib.pyplot as plt

    import mne
    from mne.time_frequency import tfr_morlet
    from mne.stats import permutation_cluster_test
    from mne.datasets import sample

    print(__doc__)







Set parameters



.. code-block:: python

    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_raw-eve.fif'
    tmin, tmax = -0.2, 0.5

    # Setup for reading the raw data
    raw = mne.io.read_raw_fif(raw_fname)
    events = mne.read_events(event_fname)

    include = []
    raw.info['bads'] += ['MEG 2443', 'EEG 053']  # bads + 2 more

    # picks MEG gradiometers
    picks = mne.pick_types(raw.info, meg='grad', eeg=False, eog=True,
                           stim=False, include=include, exclude='bads')

    ch_name = 'MEG 1332'  # restrict example to one channel

    # Load condition 1
    reject = dict(grad=4000e-13, eog=150e-6)
    event_id = 1
    epochs_condition_1 = mne.Epochs(raw, events, event_id, tmin, tmax,
                                    picks=picks, baseline=(None, 0),
                                    reject=reject, preload=True)
    epochs_condition_1.pick_channels([ch_name])

    # Load condition 2
    event_id = 2
    epochs_condition_2 = mne.Epochs(raw, events, event_id, tmin, tmax,
                                    picks=picks, baseline=(None, 0),
                                    reject=reject, preload=True)
    epochs_condition_2.pick_channels([ch_name])





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/ubuntu/mne_data/MNE-sample-data/MEG/sample/sample_audvis_raw.fif...
        Read a total of 3 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
        Range : 25800 ... 192599 =     42.956 ...   320.670 secs
    Ready.
    Current compensation grade : 0
    add_eeg_ref defaults to True in 0.13, will default to False in 0.14, and will be removed in 0.15. We recommend to use add_eeg_ref=False and set_eeg_reference() instead.
    Adding average EEG reference projection.
    1 projection items deactivated
    72 matching events found
    Applying baseline correction (mode: mean)
    4 projection items activated
    Loading data for 72 events and 421 original time points ...
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
    16 bad epochs dropped
    73 matching events found
    Applying baseline correction (mode: mean)
    4 projection items activated
    Loading data for 73 events and 421 original time points ...
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
        Rejecting  epoch based on EOG : [u'EOG 061']
    13 bad epochs dropped


Factor to downsample the temporal dimension of the TFR computed by
tfr_morlet. Decimation occurs after frequency decomposition and can
be used to reduce memory usage (and possibly comptuational time of downstream
operations such as nonparametric statistics) if you don't need high
spectrotemporal resolution.



.. code-block:: python

    decim = 2
    frequencies = np.arange(7, 30, 3)  # define frequencies of interest
    n_cycles = 1.5

    tfr_epochs_1 = tfr_morlet(epochs_condition_1, frequencies,
                              n_cycles=n_cycles, decim=decim,
                              return_itc=False, average=False)

    tfr_epochs_2 = tfr_morlet(epochs_condition_2, frequencies,
                              n_cycles=n_cycles, decim=decim,
                              return_itc=False, average=False)

    tfr_epochs_1.apply_baseline(mode='ratio', baseline=(None, 0))
    tfr_epochs_2.apply_baseline(mode='ratio', baseline=(None, 0))

    epochs_power_1 = tfr_epochs_1.data[:, 0, :, :]  # only 1 channel as 3D matrix
    epochs_power_2 = tfr_epochs_2.data[:, 0, :, :]  # only 1 channel as 3D matrix





.. rst-class:: sphx-glr-script-out

 Out::

    Applying baseline correction (mode: ratio)
    Applying baseline correction (mode: ratio)


Compute statistic
-----------------



.. code-block:: python

    threshold = 6.0
    T_obs, clusters, cluster_p_values, H0 = \
        permutation_cluster_test([epochs_power_1, epochs_power_2],
                                 n_permutations=100, threshold=threshold, tail=0)





.. rst-class:: sphx-glr-script-out

 Out::

    stat_fun(H1): min=0.000000 max=13.566824
    Running initial clustering
    Found 6 clusters
    Permuting ...
    [                                        ] 1.00000 |        [............                            ] 32.00000 /        [.........................               ] 64.00000 -        [......................................  ] 96.00000 \    Computing cluster p-values
    Done.


View time-frequency plots
-------------------------



.. code-block:: python


    times = 1e3 * epochs_condition_1.times  # change unit to ms
    evoked_condition_1 = epochs_condition_1.average()
    evoked_condition_2 = epochs_condition_2.average()

    plt.figure()
    plt.subplots_adjust(0.12, 0.08, 0.96, 0.94, 0.2, 0.43)

    plt.subplot(2, 1, 1)
    # Create new stats image with only significant clusters
    T_obs_plot = np.nan * np.ones_like(T_obs)
    for c, p_val in zip(clusters, cluster_p_values):
        if p_val <= 0.05:
            T_obs_plot[c] = T_obs[c]

    plt.imshow(T_obs,
               extent=[times[0], times[-1], frequencies[0], frequencies[-1]],
               aspect='auto', origin='lower', cmap='gray')
    plt.imshow(T_obs_plot,
               extent=[times[0], times[-1], frequencies[0], frequencies[-1]],
               aspect='auto', origin='lower', cmap='RdBu_r')

    plt.xlabel('Time (ms)')
    plt.ylabel('Frequency (Hz)')
    plt.title('Induced power (%s)' % ch_name)

    ax2 = plt.subplot(2, 1, 2)
    evoked_contrast = mne.combine_evoked([evoked_condition_1, evoked_condition_2],
                                         weights=[1, -1])
    evoked_contrast.plot(axes=ax2)

    plt.show()



.. image:: /auto_tutorials/images/sphx_glr_plot_stats_cluster_time_frequency_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  1.296 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_stats_cluster_time_frequency.py <plot_stats_cluster_time_frequency.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_stats_cluster_time_frequency.ipynb <plot_stats_cluster_time_frequency.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
